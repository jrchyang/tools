FROM ubuntu:latest as build
SHELL ["/bin/bash", "-c"]
WORKDIR /tmp

# update apt source
RUN apt-get update
RUN apt-get install -y ca-certificates

# use tsinghua apt source
RUN tee /etc/apt/sources.list <<-'EOF'
# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-updates main restricted universe multiverse
deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse
# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-backports main restricted universe multiverse

deb http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse
# deb-src http://security.ubuntu.com/ubuntu/ jammy-security main restricted universe multiverse

# 预发布软件源，不建议启用
# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse
# # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ jammy-proposed main restricted universe multiverse

EOF

RUN apt-get update

# install tools
RUN echo "Asia\nShanghai" | apt-get -y install tzdata
RUN apt-get install -y \
  vim git wget curl net-tools apt-file libtool\
  gcc g++ make automake cmake ninja-build build-essential \
  python3 python3-dev python3-sphinx golang nodejs \
  ack fonts-powerline vim-nox mono-complete openjdk-17-jdk openjdk-17-jre \
  npm llvm clang clangd libnuma-dev libzstd-dev libzbd-dev bear ccache \
  lua5.4 liblua5.4-dev tcl sqlite3 libsqlite3-dev \
  systemtap-sdt-dev libbpfcc-dev libbpf-dev libclang-11-dev bison flex \
  libelf-dev libcereal-dev libclang-dev libgtest-dev libgmock-dev asciidoctor \
  libthrift-dev texinfo rdma-core libsystemd-dev libblkid-dev libaio-dev \
  libsnappy-dev lz4 libdw-dev bpfcc-tools bpftrace librados-dev librbd-dev \
  nvme-cli fio exa

# install vim dev env
RUN tee ~/.bashrc <<-'EOF'

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#    . /etc/bash_completion
#fi

# alias
alias rm='rm -rf'
alias ..='cd ..'
alias ll='exa --long --header --group --modified --color-scale'

# set bash git branch
function git_branch {
    branch="`git branch 2>/dev/null | grep "^\*" | sed -e "s/^\*\ //"`"
    if [ "${branch}" != "" ];then
        if [ "${branch}" = "(no branch)" ];then
            branch="(`git rev-parse --short HEAD`...)"
        fi
        echo " ($branch)"
    fi
}
export PS1='\u@\h \[\033[01;36m\]\W\[\033[01;32m\]$(git_branch)\[\033[00m\] \$ '

# set vim color
export TERM=xterm-256color

# ccache
export USE_CCACHE=1
export CCACHE_SLOPPINESS=file_macro,include_file_mtime,time_macros
export CCACHE_UMASK=002

EOF

# install rust env
RUN curl https://sh.rustup.rs -sSf | sh -s -- -y && \
  /bin/bash -c '$HOME/.cargo/bin/rustup component add rust-src rust-analyzer-preview'

# install vim
RUN git clone --depth=1 https://github.com/jrchyang/vimrc.git ~/.vim_runtime && \
  cd $HOME/.vim_runtime && \
  git submodule update --init --recursive && \
  python3 $HOME/.vim_runtime/my_plugins/YouCompleteMe/install.py --clang-completer --clangd-completer --system-libclang --cs-completer --go-completer --java-completer --ts-completer --force-sudo && \
  /bin/bash -c '$HOME/.vim_runtime/install_awesome_vimrc.sh' && \
  cd /tmp

# get ceph to install dep
RUN git clone --depth=1 --branch v17.2.7 https://github.com/ceph/ceph ceph-v17.2.7 && \
  cd ceph-v17.2.7 && \
  ./install-deps.sh && \
  cd - && \
  rm -rf ceph-v17.2.7

RUN git clone --depth=1 --branch v18.2.0 https://github.com/ceph/ceph ceph-v18.2.0 && \
  cd ceph-v18.2.0 && \
  ./install-deps.sh && \
  cd - && \
  rm -rf ceph-v18.2.0

# install clickhouse
RUN wget -O abseil-cpp-20200923.3.tar.gz https://github.com/abseil/abseil-cpp/archive/refs/tags/20200923.3.tar.gz && \
  tar -zxf abseil-cpp-20200923.3.tar.gz && \
  cd abseil-cpp-20200923.3 && \
  mkdir build && cd build && \
  cmake .. -DCMAKE_BUILD_TYPE=Debug && \
  make && \
  make install && \
  cd ../.. && \
  rm -rf abseil-cpp-20200923.3*

RUN wget -O clickhouse-cpp-v2.1.0.tar.gz https://github.com/ClickHouse/clickhouse-cpp/archive/refs/tags/v2.1.0.tar.gz && \
  tar -zxf clickhouse-cpp-v2.1.0.tar.gz && \
  cd clickhouse-cpp-2.1.0 && \
  mkdir build && cd build && \
  cmake .. -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug && \
  make && \
  make install && \
  cd ../.. && \
  rm -rf clickhouse-cpp*

# install rocksdb deps
RUN git clone --depth=1 --branch v2.2.2 https://github.com/gflags/gflags.git gflags-v2.2.2 && \
  cd gflags-v2.2.2 && \
  mkdir build && cd build && \
  cmake .. -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Debug && \
  make && \
  make install && \
  cd ../.. && \
  rm -rf gflags-v2.2.2

RUN git clone --depth=1 --branch 1.1.10 https://github.com/google/snappy.git snappy-v1.1.10 && \
  cd snappy-v1.1.10 && \
  git submodule update --init --recursive && \
  mkdir build && cd build && \
  cmake .. -DBUILD_SHARED_LIBS=1 -DCMAKE_BUILD_TYPE=Debug && \
  make && \
  make install && \
  cd ../..  && \
  rm -rf snappy-v1.1.10

RUN apt-get clean
